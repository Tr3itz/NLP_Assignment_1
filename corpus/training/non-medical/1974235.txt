The belief–desire–intention software model (BDI) is a software model developed for programming intelligent agents. Superficially characterized by the implementation of an agent's beliefs, desires and intentions, it actually uses these concepts to solve a particular problem in agent programming. In essence, it provides a mechanism for separating the activity of selecting a plan (from a plan library or an external planner application) from the execution of currently active plans. Consequently, BDI agents are able to balance the time spent on deliberating about plans (choosing what to do) and executing those plans (doing it). A third activity, creating the plans in the first place (planning), is not within the scope of the model, and is left to the system designer and programmer.


== Overview ==
In order to achieve this separation, the BDI software model implements the principal aspects of Michael Bratman's theory of human practical reasoning (also referred to as Belief-Desire-Intention, or BDI). That is to say, it implements the notions of belief, desire and (in particular) intention, in a manner inspired by Bratman. For Bratman, desire and intention are both pro-attitudes (mental attitudes concerned with action). He identifies commitment as the distinguishing factor between desire and intention, noting that it leads to (1) temporal persistence in plans and (2) further plans being made on the basis of those to which it is already committed. The BDI software model partially addresses these issues. Temporal persistence, in the sense of explicit reference to time, is not explored. The hierarchical nature of plans is more easily implemented: a plan consists of a number of steps, some of which may invoke other plans. The hierarchical definition of plans itself implies a kind of temporal persistence, since the overarching plan remains in effect while subsidiary plans are being executed.
An important aspect of the BDI software model (in terms of its research relevance) is the existence of logical models through which it is possible to define and reason about BDI agents. Research in this area has led, for example, to the axiomatization of some BDI implementations, as well as to formal logical descriptions such as Anand Rao and Michael Georgeff's BDICTL. The latter combines a multiple-modal logic (with modalities representing beliefs, desires and intentions) with the temporal logic CTL*. 
More recently, Michael Wooldridge has extended BDICTL to define LORA (the Logic Of Rational Agents), by incorporating an action logic. In principle, LORA allows reasoning not only about individual agents, but also about communication and other interaction in a multi-agent system.
The BDI software model is closely associated with intelligent agents, but does not, of itself, ensure all the characteristics associated with such agents. For example, it allows agents to have private beliefs, but does not force them to be private. It also has nothing to say about agent communication. Ultimately, the BDI software model is an attempt to solve a problem that has more to do with plans and planning (the choice and execution thereof) than it has to do with the programming of intelligent agents. This approach has recently been proposed by Steven Umbrello and Roman Yampolskiy as a means of designing autonomous vehicles for human values.


== BDI agents ==
A BDI agent is a particular type of bounded rational software agent, imbued with particular mental attitudes, viz: Beliefs, Desires and Intentions (BDI).


=== Architecture ===
This section defines the idealized architectural components of a BDI system.

Beliefs: Beliefs represent the informational state of the agent, in other words its beliefs about the world (including itself and other agents). Beliefs can also include inference rules, allowing forward chaining to lead to new beliefs. Using the term belief rather than knowledge recognizes that what an agent believes may not necessarily be true (and in fact may change in the future).
Beliefset: Beliefs are stored in  database (sometimes called a belief base or a belief set), although that is an implementation decision.
Desires: Desires represent the motivational state of the agent. They represent objectives or situations that the agent would like to accomplish or bring about. Examples of desires might be: find the best price, go to the party or become rich.
Goals: A goal is a desire that has been adopted for active pursuit by the agent. Usage of the term goals adds the further restriction that the set of active desires must be consistent. For example, one should not have concurrent goals to go to a party and to stay at home – even though they could both be desirable.
Intentions: Intentions represent the deliberative state of the agent – what the agent has chosen to do. Intentions are desires to which the agent has to some extent committed. In implemented systems, this means the agent has begun executing a plan.
Plans: Plans are sequences of actions (recipes or knowledge areas) that an agent can perform to achieve one or more of its intentions. Plans may include other plans: my plan to go for a drive may include a plan to find my car keys. This reflects that in Bratman's model, plans are initially only partially conceived, with details being filled in as they progress.
Events: These are triggers for reactive activity by the agent. An event may update beliefs, trigger plans or modify goals. Events may be generated externally and received by sensors or integrated systems. Additionally, events may be generated internally to trigger decoupled updates or plans of activity.BDI was also extended with an obligations component, giving rise to the BOID agent architecture to incorporate obligations, norms and commitments of agents that act within a social environment.


=== BDI interpreter ===
This section defines an idealized BDI interpreter that provides the basis of SRI's PRS lineage of BDI systems:
initialize-state
repeat
options: option-generator (event-queue)
selected-options: deliberate(options)
update-intentions(selected-options)
execute()
get-new-external-events()
drop-unsuccessful-attitudes()
drop-impossible-attitudes()
end repeat


=== Limitations and criticisms ===
The BDI software model is one example of a reasoning architecture for a single rational agent, and one concern in a broader multi-agent system. This section bounds the scope of concerns for the BDI software model, highlighting known limitations of the architecture.

Learning: BDI agents lack any specific mechanisms within the architecture to learn from past behavior and adapt to new situations.
Three attitudes: Classical decision theorists and planning research questions the necessity of having all three attitudes, distributed AI research questions whether the three attitudes are sufficient.
Logics: The multi-modal logics that underlie BDI (that do not have complete axiomatizations and are not efficiently computable) have little relevance in practice.
Multiple agents: In addition to not explicitly supporting learning, the framework may not be appropriate to learning behavior. Further, the BDI model does not explicitly describe mechanisms for interaction with other agents and integration into a multi-agent system.
Explicit goals: Most BDI implementations do not have an explicit representation of goals.
Lookahead: The architecture does not have (by design) any lookahead deliberation or forward planning. This may not be desirable because adopted plans may use up limited resources, actions may not be reversible, task execution may take longer than forward planning, and actions may have undesirable side effects if unsuccessful.


== BDI agent implementations ==


=== 'Pure' BDI ===
Procedural Reasoning System (PRS)
IRMA (not implemented but can be considered as PRS with non-reconsideration)
UM-PRS
OpenPRS
Distributed Multi-Agent Reasoning System (dMARS)
AgentSpeak(L) – see Jason below
AgentSpeak(RT)
Agent Real-Time System (ARTS) (ARTS)
JAM
JACK Intelligent Agents
JADEX (open source project)
JASON
GORITE
SPARK
3APL
2APL
GOAL agent programming language
CogniTAO (Think-As-One)
Living Systems Process Suite
PROFETA
Gwendolen (Part of the Model Checking Agent Programming Languages Framework)


=== Extensions and hybrid systems ===
JACK Teams
CogniTAO (Think-As-One)
Living Systems Process Suite
Brahms
JaCaMo


== See also ==
Action selection
Artificial intelligence
Belief–desire–intention model
Belief revision
Intelligent agent
Reasoning
Software agent


== Notes ==


== References ==
A. S. Rao and M. P. Georgeff. Modeling Rational Agents within a BDI-Architecture. In Proceedings of the 2nd International Conference on Principles of Knowledge Representation and Reasoning, pages 473–484, 1991.
A. S. Rao and M. P. Georgeff. BDI-agents: From Theory to Practice Archived 2011-06-04 at the Wayback Machine, In Proceedings of the First International Conference on Multiagent Systems (ICMAS'95), San Francisco, 1995.
Bratman, M. E. (1999) [1987]. Intention, Plans, and Practical Reason. CSLI Publications. ISBN 1-57586-192-5.
Wooldridge, M. (2000). Reasoning About Rational Agents. The MIT Press. ISBN 0-262-23213-8. Archived from the original on 2010-07-30. Retrieved 2006-06-15.
K. S. Vikhorev, N. Alechina, and B. Logan. The ARTS Real-Time Agent Architecture. In Proceedings of Second Workshop on Languages, Methodologies and Development Tools for Multi-agent Systems (LADS2009). CEUR Workshop Proceedings, Vol-494, Turin, Italy, 2009.